# Options, highlighters, etc.
colorscheme catppuccin_macchiato

set global indentwidth 2
set global ui_options terminal_assistant=none
set global tabstop 2
set global indentwidth 2

add-highlighter global/git-diff flag-lines Default git_diff_flags
#add-highlighter global/number-lines number-lines -hlcursor
add-highlighter global/hl-col-120 column 120 default,black+d
add-highlighter global/show-whitespaces show-whitespaces -only-trailing
set-face global Whitespace black+f

# Better :grep!
set-option global grepcmd 'rg --column --smart-case --sort path'

# Git support
map global user g ':enter-user-mode git<ret>' -docstring 'git mode'
set-option global awk_cmd %sh{
  test "$(uname)" = "Darwin" && echo 'gawk' || echo 'awk'
}

## Some specific filetypes I see at work / spare-time
hook global WinCreate .*\.bzl %{ set-option buffer filetype python }
hook global WinCreate .*\.zprofile %{ set-option buffer filetype sh }
hook global WinCreate .*\.(bazel|bzl) %{ set-option buffer filetype python }
hook global WinCreate .*\.nu %{ set-option buffer filetype nu }

# Commands

# window mode
declare-user-mode window

## kitty integration
define-command -hidden kitty-split -params 1 -docstring 'split the current window according to the param (vsplit / hsplit)' %{
  nop %sh{
    kitty @ launch --no-response --location $1 kak -c $kak_session
  }
}

## zellij integration
define-command -hidden zellij-split -params 1 -docstring 'split (down / right)' %{
  nop %sh{
    zellij action new-pane -cd $1 -- kak -c $kak_session
  }
}

define-command -hidden zellij-move-focus -params 1 %{
  nop %sh{
    zellij action move-focus $1
  }
}

declare-user-mode window-zellij
map global window-zellij Q ':q!<ret>'                  -docstring 'close window (force)'
map global window-zellij q ':q<ret>'                   -docstring 'close window'
map global window-zellij c ':zellij-move-focus left<ret>' -docstring 'move left'
map global window-zellij t ':zellij-move-focus down<ret>' -docstring 'move down'
map global window-zellij s ':zellij-move-focus up<ret>' -docstring 'move up'
map global window-zellij r ':zellij-move-focus right<ret>' -docstring 'move right'
map global window-zellij o ':zellij-split down<ret>'       -docstring 'horizontal split'
map global window-zellij v ':zellij-split right<ret>'       -docstring 'vertical split'

## tmux integration
define-command tmux-split -params 1 -docstring 'split (down / right)' %{
  nop %sh{
    tmux split-window $1 kak -c $kak_session
  }
}

define-command tmux-select-pane -params 1 -docstring 'select pane' %{
  nop %sh{
    tmux select-pane $1
  }
}

## Some pickers
define-command -hidden open_buffer_picker %{
  prompt buffer: -menu -buffer-completion %{
    buffer %val{text}
  }
}

define-command -hidden open_file_picker %{
  prompt file: -menu -shell-script-candidates 'fd --type=file' %{
    edit -existing %val{text}
  }
}

define-command -hidden open_rg_picker %{
  prompt search: %{
    prompt refine: -menu -shell-script-candidates "rg -in --column '%val{text}'" %{
      evaluate-commands "edit -existing %sh{
        IFS=':' read -r file line column rest <<< ""$kak_text""
        echo \""$file\"" $line $column
      }"
    }
  }
}

## match mode
define-command -hidden match-delete-surround -docstring 'delete surrounding key' %{
  on-key %{
    match-delete-surround-key %val{key}
  }
}

define-command -hidden match-delete-surround-key -params 1 %{
  execute-keys -draft "<a-a>%arg{1}i<del><esc>a<backspace><esc>"
}

## surround mode
define-command surround-key -docstring 'surround key' %{
  on-key %{
    add-surrounding-pair %val{key} %val{key}
  }
}

define-command surround-tag -docstring 'surround tag' %{
  prompt surround-tag: %{
    add-surrounding-pair "<%val{text}>" "</%val{text}>"
  }
}
    
define-command -override add-surrounding-pair -params 2 -docstring 'add surrounding pairs left and right to selection' %{
  evaluate-commands -no-hooks -save-regs '"' %{
    set-register '"' %arg{1}
    execute-keys -draft P
    set-register '"' %arg{2}
    execute-keys -draft p
  }
}

define-command surround-replace -docstring 'prompt for a surrounding pair and replace it with another' %{
  on-key %{
    surround-replace-sub %val{key}
  }
}

define-command -hidden surround-replace-sub -params 1 %{
	on-key %{
    evaluate-commands -no-hooks -draft %{
      execute-keys "<a-a>%arg{1}"

      # select the surrounding pair and add the new one around it
      enter-user-mode surround-add
      execute-keys %val{key}
    }

    # delete the old one
    match-delete-surround-key %arg{1}
	}
}

declare-user-mode match
map global match a '<a-a>'                               -docstring 'match around'
map global match d ':match-delete-surround<ret>'         -docstring 'delete surround'
map global match i '<a-i>'                               -docstring 'match inside'
map global match m m                                     -docstring 'select other matching delimiter'
map global match s ':enter-user-mode surround-add<ret>'  -docstring 'add surrounding pairs'
map global match r ':surround-replace<ret>'              -docstring 'replace surrounding pairs'

declare-user-mode match-extend
map global match-extend a '<A-a>'                        -docstring 'extend around'
map global match-extend i '<A-i>'                        -docstring 'extend inside'
map global match-extend m M                              -docstring 'extend other matching delimiter'

# surround-add mode; support most of the useful delimiters
declare-user-mode surround-add
map global surround-add "'" ":add-surrounding-pair ""'"" ""'""<ret>" -docstring 'surround selections with quotes'
map global surround-add ' ' ':add-surrounding-pair " " " "<ret>'     -docstring 'surround selections with pipes'
map global surround-add '"' ':add-surrounding-pair ''"'' ''"''<ret>' -docstring 'surround selections with double quotes'
map global surround-add '(' ':add-surrounding-pair ( )<ret>'         -docstring 'surround selections with curved brackets'
map global surround-add ')' ':add-surrounding-pair ( )<ret>'         -docstring 'surround selections with curved brackets'
map global surround-add '*' ':add-surrounding-pair * *<ret>'         -docstring 'surround selections with stars'
map global surround-add '<' ':add-surrounding-pair <lt> <gt><ret>'   -docstring 'surround selections with chevrons'
map global surround-add '>' ':add-surrounding-pair <lt> <gt><ret>'   -docstring 'surround selections with chevrons'
map global surround-add '[' ':add-surrounding-pair [ ]<ret>'         -docstring 'surround selections with square brackets'
map global surround-add ']' ':add-surrounding-pair [ ]<ret>'         -docstring 'surround selections with square brackets'
map global surround-add '_' ':add-surrounding-pair "_" "_"<ret>'     -docstring 'surround selections with underscores'
map global surround-add '{' ':add-surrounding-pair { }<ret>'         -docstring 'surround selections with angle brackets'
map global surround-add '|' ':add-surrounding-pair | |<ret>'         -docstring 'surround selections with pipes'
map global surround-add '}' ':add-surrounding-pair { }<ret>'         -docstring 'surround selections with angle brackets'
map global surround-add '«' ':add-surrounding-pair « »<ret>'         -docstring 'surround selections with French chevrons'
map global surround-add '»' ':add-surrounding-pair « »<ret>'         -docstring 'surround selections with French chevrons'
map global surround-add '“' ':add-surrounding-pair “ ”<ret>'         -docstring 'surround selections with French chevrons'
map global surround-add '”' ':add-surrounding-pair “ ”<ret>'         -docstring 'surround selections with French chevrons'
map global surround-add ` ':add-surrounding-pair ` `<ret>'           -docstring 'surround selections with ticks'
map global surround-add t ':surround-tag<ret>'                       -docstring 'surround selections with a <tag>'

## yank mode
define-command extra-yank-buffile -docstring 'yank the path of the current buffer' %{
  set-register p %val{buffile}
}

declare-option str extra_yank_system_clipboard_cmd %sh{
  test "$(uname)" = "Darwin" && echo 'pbcopy' || echo 'xclip'
}

declare-option str extra_paste_system_clipboard_cmd %sh{
  test "$(uname)" = "Darwin" && echo 'pbpaste' || echo 'xsel -ob'
}

define-command extra-yank-system -docstring 'yank into the system clipboard' %{
  execute-keys -draft "!%opt{extra_yank_system_clipboard_cmd}<ret>"
}

define-command extra-paste-system -docstring 'paste from the system clipboard' %{
  execute-keys -draft "!%opt{extra_paste_system_clipboard_cmd}<ret>"
}

map global user y ':extra-yank-system<ret>'   -docstring 'yank to system clipboard'
map global user p ':extra-paste-system<ret>' -docstring 'paste selections from system clipboard'

## notes
set-option global kak_notes_root_dir %sh{ echo $HOME/notes }
set-option global kak_notes_dir %sh{ echo $HOME/notes/notes }
set-option global kak_notes_archives_dir %sh{ echo $HOME/notes/archives }
set-option global kak_notes_journal_dir %sh{ echo $HOME/notes/journal }
set-option global kak_notes_capture_file %sh{ echo $HOME/notes/capture.md }

# Tree-sitter
eval %sh{ kak-tree-sitter -dks --session $kak_session -vvvvv }

# Modeline
set-face global StatusLineBlack black
set-face global StatusLineGit "%opt{kts_red}"

declare-option str bufname_abbrev
hook global -group bufname-abbrev BufCreate .* %{
  set-option buffer bufname_abbrev %sh{
    if (( ${#kak_bufname} > $((kak_window_width / 4)) )); then
      sed "s:\([^/]\)[^/]*/:\1/:g" <<< $kak_bufname
    else
      echo $kak_bufname
    fi
  }
}

set-option global modelinefmt '{DiagnosticError} %opt{lsp_diagnostic_error_count} {DiagnosticWarning} %opt{lsp_diagnostic_warning_count} {DiagnosticInfo} %opt{lsp_diagnostic_info_count} {DiagnosticHint} %opt{lsp_diagnostic_hint_count} {StatusLineGit}%opt{git_branch_name}{StatusLine} %opt{bufname_abbrev} {StatusLineBlack}(%val{cursor_line}:%val{cursor_char_column} {StatusLineBlack}%val{buf_line_count}L){{context_info}} {{mode_info}} {ts_comment}%val{client}@[%val{session}]'

# kak-notes
set-face global kak_notes_todo %opt{kts_green}
set-face global kak_notes_wip %opt{kts_mauve}
set-face global kak_notes_wontdo %opt{kts_red}
set-face global kak_notes_wontdo_text black+s
set-face global kak_notes_issue "%opt{kts_teal}+u"
set-face global kak_notes_task_list_delimiter black
set-face global kak_notes_task_list_path %opt{kts_blue}
set-face global kak_notes_task_list_line black
set-face global kak_notes_task_list_col black
set-face global kak_notes_tag %opt{kts_green}

# LSP
eval %sh{ kak-lsp --kakoune -s $kak_session }

## common options
lsp-auto-signature-help-enable
set-option global lsp_hover_anchor true
set-option global lsp_auto_show_code_actions true

## main hook for languages
hook global WinSetOption filetype=(rust|python|go|javascript|typescript|c|cpp) %{
  lsp-enable-window

  lsp-diagnostic-lines-disable window
  lsp-inline-diagnostics-disable window
  lsp-inlay-diagnostics-enable window
  lsp-inlay-hints-enable window
  lsp-inlay-code-lenses-enable window

  hook window BufWritePre .* lsp-formatting-sync
  #hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
  #hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
  #hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
  #hook -once -always window WinSetOption filetype=.* %{
  #    remove-hooks window semantic-tokens
  #}
}

# faces / colorschemes
## inlay hints (type annotations, etc.)
set-face global PrimaryCursor "black,%opt{kts_mauve}+i"
set-face global PrimaryCursorEol "default,%opt{kts_red}"
set-face global SecondaryCursor "black,white"
set-face global SecondaryCursorEol "default,%opt{kts_yellow}"
set-face global PrimarySelection "default,black+i"
set-face global SecondarySelection "default,black"
set-face global MenuForeground "black,%opt{kts_mauve}"
set-face global MenuInfo "%opt{kts_green},black"
set-face global Information "%opt{kts_peach},default"
set-face global StatusLine "%opt{kts_mauve},rgb:1e2030"
set-face global StatusLineMode "%opt{kts_green}"
set-face global StatusLineInfo "%opt{kts_teal}"
set-face global StatusLineValue "%opt{kts_peach}"
set-face global StatusCursor "black,%opt{kts_mauve}"
set-face global Prompt "%opt{kts_peach}"
set-face global InlayHint black+i
set-face global DiagnosticInfo "%opt{kts_blue}"
set-face global DiagnosticHint "%opt{kts_mauve}"
set-face global DiagnosticWarning "%opt{kts_peach}"
set-face global DiagnosticError "%opt{kts_red}"

# keybindings

## bépo remapping
map global normal c h # left
map global normal t j # down
map global normal s k # up
map global normal r l # right
map global normal C H # extend left
map global normal T J # extend down
map global normal S K # extend up
map global normal R L # extend right
map global normal h t # until
map global normal <a-h> <a-t>
map global normal j r # replace
map global normal k s # select
map global normal l c # change
map global normal H T # extend to next char
map global normal <a-H> <a-T>
map global normal J R # replace with yanked
map global normal K S # split
map global normal L C # duplicate selection downwards
map global normal <a-%> ':execute-keys gtGbx<ret>'
map global insert ' ' ' '
map global insert '<tab>' '  '
map global goto c h -docstring 'line begin' 
map global goto t j -docstring 'buffer bottom' 
map global goto s k -docstring 'buffer top' 
map global goto r l -docstring 'line end' 
map global goto T t -docstring 'window top' 
map global view c h -docstring 'scroll left' 
map global view t j -docstring 'scroll up' 
map global view s k -docstring 'scroll down' 
map global view r l -docstring 'scroll right'

## anchor / cursor
map global user <space> '<a-;>'

## insert mode C-w
map global insert <c-w> '<esc>:execute-keys bd<ret>i'

## convenience
map global user $ ':e -existing ~/.config/kak/kakrc<ret>' -docstring 'edit Kakoune configuration'
map global user s '|sort<ret>' -docstring 'sort selections'

## pickers
map global user / ':grep '                   -docstring 'grep'
map global user b ':open_buffer_picker<ret>' -docstring 'pick buffer'
map global user f ':open_file_picker<ret>'   -docstring 'pick file'
map global user F ':open_rg_picker<ret>'     -docstring 'search project'

## match
map global normal M ':enter-user-mode match-extend<ret>' -docstring 'match mode (extend)'
map global normal m ':enter-user-mode match<ret>'        -docstring 'match mode'

## window management
map global user w ':enter-user-mode window-tmux<ret>' -docstring 'window mode'

declare-user-mode window-tmux
map global window-tmux Q ':q!<ret>'                  -docstring 'close window (force)'
map global window-tmux c ':tmux-select-pane -L<ret>' -docstring 'move left'
map global window-tmux o ':tmux-split -v<ret>'       -docstring 'horizontal split'
map global window-tmux q ':q<ret>'                   -docstring 'close window'
map global window-tmux r ':tmux-select-pane -R<ret>' -docstring 'move right'
map global window-tmux s ':tmux-select-pane -U<ret>' -docstring 'move up'
map global window-tmux t ':tmux-select-pane -D<ret>' -docstring 'move down'
map global window-tmux v ':tmux-split -h<ret>'       -docstring 'vertical split'

## LSP
declare-user-mode user-lsp
map global user l ':enter-user-mode user-lsp<ret>'       -docstring 'lsp mode'
map global user n ':enter-user-mode kak-notes<ret>'      -docstring 'notes'
map global user-lsp ( ':lsp-previous-function<ret>'      -docstring 'jump to the previous function'
map global user-lsp ) ':lsp-next-function<ret>'          -docstring 'jump to the next function'
map global user-lsp I ':lsp-implementation<ret>'         -docstring 'list implementations'
map global user-lsp K ':lsp-hover-buffer<ret>'           -docstring 'hover in a dedicated buffer'
map global user-lsp P ':lsp-workspace-symbol<ret>'       -docstring 'list workspace symbols'
map global user-lsp R ':lsp-rename-prompt<ret>'          -docstring 'rename'
map global user-lsp S ':lsp-document-symbol<ret>'        -docstring 'list workspace symbols'
map global user-lsp a ':lsp-code-actions<ret>'           -docstring 'code action'
map global user-lsp c ':lsp-code-lens<ret>'              -docstring 'execute code lens'
map global user-lsp d ':lsp-diagnostics<ret>'            -docstring 'list diagnostics'
map global user-lsp h ':lsp-highlight-references<ret>'   -docstring 'highlight references'
map global user-lsp i ':lsp-incoming-calls<ret>'         -docstring 'incoming calls'
map global user-lsp k ':lsp-hover<ret>'                  -docstring 'hover'
map global user-lsp o ':lsp-outgoing-calls<ret>'         -docstring 'outgoing calls'
map global user-lsp p ':lsp-workspace-symbol-incr<ret>'  -docstring 'pick workspace symbol'
map global user-lsp r ':lsp-references<ret>'             -docstring 'list references'
map global user-lsp s ':lsp-goto-document-symbol<ret>'   -docstring 'pick document symbol'
map global user-lsp x ':lsp-find-error<ret>'             -docstring 'jump to the prev/next error'

## bookmarks
map global user _ ':enter-user-mode bookmarks<ret>' -docstring 'bookmarks'

# hop.kak
declare-option str hop_kak_keyset 'etisura,cnovpdélxqygàhfbjz'

define-command hop-kak %{
  eval -no-hooks -- %sh{ hop-kak --keyset "$kak_opt_hop_kak_keyset" --sels "$kak_selections_desc" }
}

define-command hop-kak-words %{
  exec 'gtGbxs\w+<ret>:eval -no-hooks -- %sh{ hop-kak --keyset "$kak_opt_hop_kak_keyset" --sels "$kak_selections_desc" }<ret>'
}

map global normal È :hop-kak<ret>
map global normal è :hop-kak-words<ret>
