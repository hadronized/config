# Options, highlighters, etc.
colorscheme catppuccin_macchiato

set global indentwidth 2
set global ui_options terminal_assistant=none
set global tabstop 2
set global indentwidth 2

add-highlighter global/git-diff flag-lines Default git_diff_flags
#add-highlighter global/number-lines number-lines -hlcursor
add-highlighter global/hl-col-120 column 120 black+r

## automatically update git diff, if needed
#hook global BufCreate .* %{git show-diff} # FIXME: not sure it’s the best way
hook global BufWritePost .* %{git update-diff}

## Some specific filetypes I see at work / spare-time
hook global WinCreate .*\.bzl %{ set-option buffer filetype python }
hook global WinCreate .*\.zprofile %{ set-option buffer filetype sh }
hook global WinCreate .*\.(bazel|bzl) %{ set-option buffer filetype python }

# Commands

# window mode
declare-user-mode window

## kitty integration
define-command -hidden kitty-split -params 1 -docstring 'split the current window according to the param (vsplit / hsplit)' %{
  nop %sh{
    kitty @ launch --no-response --location $1 kak -c $kak_session
  }
}

## zellij integration
define-command -hidden zellij-split -params 1 -docstring 'split (down / right)' %{
  nop %sh{
    zellij action new-pane -cd $1 -- kak -c $kak_session
  }
}

define-command -hidden zellij-move-pane -params 1 -docstring 'move to pane' %{
  nop %sh{
    zellij action move-focus $1
  }
}

## tmux integration
define-command tmux-split -params 1 -docstring 'split (down / right)' %{
  nop %sh{
    tmux split-window $1 kak -c $kak_session
  }
}

define-command tmux-select-pane -params 1 -docstring 'select pane' %{
  nop %sh{
    tmux select-pane $1
  }
}

## Some pickers
define-command -hidden open_buffer_picker %{
  prompt buffer: -menu -buffer-completion %{
    buffer %val{text}
  }
}

define-command -hidden open_file_picker %{
  prompt file: -menu -shell-script-candidates 'fd --type=file' %{
    edit -existing %val{text}
  }
}

define-command -hidden open_rg_picker %{
  prompt search: %{
    prompt refine: -menu -shell-script-candidates "rg -in '%val{text}'" %{
      eval "edit -existing  %sh{(cut -d ' ' -f 1 | tr ':' ' ' ) <<< $kak_text}"
    }
  }
}

## match mode
declare-user-mode match
declare-user-mode match-extend

define-command -hidden match-delete-surround -docstring 'delete surrounding key' %{
  on-key match-delete-surround-on-key
}

define-command -hidden match-delete-surround-on-key %{
  execute-keys -draft "<a-a>%val{key}i<del><esc>a<backspace><esc>"
}

## surround mode
define-command surround-key -docstring 'surround key' %{
  on-key %{
    add-surrounding-pair %val{key} %val{key}
  }
}

define-command surround-tag -docstring 'surround tag' %{
  prompt surround-tag: %{
    add_surrounding_pair '<%val{text}>' '</%val{text}>'
  }
}
    
define-command add-surrounding-pair -params 2 %{
  evaluate-commands -draft -no-hooks -save-regs '"' %{
    set-register '"' %arg{1}
    execute-keys -draft P
    set-register '"' %arg{2}
    execute-keys -draft p
  }
}

# surround-add mode; support most of the useful delimiters
declare-user-mode surround-add
map global surround-add "'" ":add-surrounding-pair ""'"" ""'""<ret>" -docstring 'surround selections with quotes'
map global surround-add '"' ':add-surrounding-pair """" """"<ret>'   -docstring 'surround selections with double quotes'
map global surround-add '(' ':add-surrounding-pair ( )<ret>'         -docstring 'surround selections with curved brackets'
map global surround-add ')' ':add-surrounding-pair ( )<ret>'         -docstring 'surround selections with curved brackets'
map global surround-add '[' ':add-surrounding-pair [ ]<ret>'         -docstring 'surround selections with square brackets'
map global surround-add ']' ':add-surrounding-pair [ ]<ret>'         -docstring 'surround selections with square brackets'
map global surround-add '{' ':add-surrounding-pair { }<ret>'         -docstring 'surround selections with angle brackets'
map global surround-add '}' ':add-surrounding-pair { }<ret>'         -docstring 'surround selections with angle brackets'
map global surround-add '<' ':add-surrounding-pair < ><ret>'         -docstring 'surround selections with chevrons'
map global surround-add '>' ':add-surrounding-pair < ><ret>'         -docstring 'surround selections with chevrons'
map global surround-add '«' ':add-surrounding-pair « »<ret>'         -docstring 'surround selections with French chevrons'
map global surround-add '»' ':add-surrounding-pair « »<ret>'         -docstring 'surround selections with French chevrons'
map global surround-add '|' ':add-surrounding-pair | |<ret>'         -docstring 'surround selections with pipes'

# Tree-sitter
eval %sh{ kak-tree-sitter -dks --session $kak_session -vvvvv }

# LSP
eval %sh{ kak-lsp --kakoune -s $kak_session }

## common options
lsp-auto-signature-help-enable
set-option global lsp_hover_anchor true
set-option global lsp_auto_show_code_actions true

## main hook for languages
hook global WinSetOption filetype=(rust|python|go|javascript|typescript|c|cpp) %{
  lsp-enable-window

  lsp-inlay-diagnostics-enable window
  lsp-inlay-hints-enable window
  lsp-inlay-code-lenses-enable window

  hook window BufWritePre .* lsp-formatting-sync
  #hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
  #hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
  #hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
  #hook -once -always window WinSetOption filetype=.* %{
  #    remove-hooks window semantic-tokens
  #}
}

# faces / colorschemes
## inlay hints (type annotations, etc.)
set-face global PrimaryCursor "black,%opt{kts_blue}+i"
set-face global PrimaryCursorEol "default,%opt{kts_red}"
set-face global SecondaryCursor "black,white"
set-face global SecondaryCursorEol "default,%opt{kts_yellow}"
set-face global PrimarySelection "default,black+i"
set-face global SecondarySelection "default,black"
set-face global MenuForeground "black,%opt{kts_mauve}"
set-face global MenuInfo "%opt{kts_green},black"
set-face global Information "%opt{kts_mauve},default"
set-face global StatusLine "%opt{kts_teal}"
set-face global StatusLineMode black
set-face global StatusLineInfo black
set-face global StatusLineValue "%opt{kts_peach}"
set-face global StatusCursor black
set-face global InlayHint black+i

# keybindings

## bépo remapping
map global normal c h # left
map global normal t j # down
map global normal s k # up
map global normal r l # right
map global normal C H # extend left
map global normal T J # extend down
map global normal S K # extend up
map global normal R L # extend right
map global normal h t # until
map global normal <a-h> <a-t>
map global normal j r # replace
map global normal k s # select
map global normal l c # change
map global normal H T # extend to next char
map global normal <a-H> <a-T>
map global normal J R # replace with yanked
map global normal K S # split
map global normal L C # duplicate selection downwards
map global insert ' ' ' '
map global goto c h -docstring 'line begin' 
map global goto t j -docstring 'buffer bottom' 
map global goto s k -docstring 'buffer top' 
map global goto r l -docstring 'line end' 
map global view c h -docstring 'scroll left' 
map global view t j -docstring 'scroll up' 
map global view s k -docstring 'scroll down' 
map global view r l -docstring 'scroll right'

## anchor / cursor
map global user <space> '<a-;>'

## convenience
map global user $ ':e -existing ~/.config/kak/kakrc<ret>' -docstring 'edit Kakoune configuration'

## pickers
map global user b ':open_buffer_picker<ret>' -docstring 'pick buffer'
map global user f ':open_file_picker<ret>'   -docstring 'pick file'
map global user / ':open_rg_picker<ret>'     -docstring 'search project'

## match
map global normal m ':enter-user-mode match<ret>'        -docstring 'match mode'
map global match m m                                     -docstring 'select other matching delimiter'
map global match i '<a-i>'                               -docstring 'match inside'
map global match a '<a-a>'                               -docstring 'match around'
map global match d ':match-delete-surround<ret>'         -docstring 'delete surround'
map global match s ':enter-user-mode surround-add<ret>'  -docstring 'add surrounding pairs'
map global normal M ':enter-user-mode match-extend<ret>' -docstring 'match mode (extend)'
map global match-extend m M                              -docstring 'extend other matching delimiter'
map global match-extend i '<A-i>'                        -docstring 'extend inside'
map global match-extend a '<A-a>'                        -docstring 'extend around'

## window management
map global user w ':enter-user-mode window-tmux<ret>' -docstring 'window mode'

declare-user-mode window-tmux
map global window-tmux v ':tmux-split -h<ret>'       -docstring 'vertical split'
map global window-tmux o ':tmux-split -v<ret>'       -docstring 'horizontal split'
map global window-tmux c ':tmux-select-pane -L<ret>' -docstring 'move left'
map global window-tmux t ':tmux-select-pane -D<ret>' -docstring 'move down'
map global window-tmux s ':tmux-select-pane -U<ret>' -docstring 'move up'
map global window-tmux r ':tmux-select-pane -R<ret>' -docstring 'move right'
map global window-tmux q ':q<ret>'                   -docstring 'close window'
map global window-tmux Q ':q!<ret>'                  -docstring 'close window (force)'

## git
declare-user-mode git
map global user g ':enter-user-mode git<ret>' -docstring 'git mode'
map global git p ':git prev-hunk<ret>'        -docstring 'goto previous hunk'
map global git n ':git next-hunk<ret>'        -docstring 'goto next hunk'

## LSP
declare-user-mode user-lsp
map global user l ':enter-user-mode user-lsp<ret>'      -docstring 'lsp mode'
map global user-lsp a ':lsp-code-actions<ret>'          -docstring 'code action'
map global user-lsp c ':lsp-code-lens<ret>'             -docstring 'execute code lens'
map global user-lsp d ':lsp-diagnostics<ret>'           -docstring 'list diagnostics'
map global user-lsp i ':lsp-incoming-calls<ret>'        -docstring 'incoming calls'
map global user-lsp I ':lsp-implementation<ret>'        -docstring 'list implementations'
map global user-lsp h ':lsp-highlight-references<ret>'  -docstring 'highlight references'
map global user-lsp k ':lsp-hover<ret>'                 -docstring 'hover'
map global user-lsp K ':lsp-hover-buffer<ret>'          -docstring 'hover in a dedicated buffer'
map global user-lsp p ':lsp-workspace-symbol-incr<ret>' -docstring 'pick workspace symbol'
map global user-lsp P ':lsp-workspace-symbol<ret>'      -docstring 'list workspace symbols'
map global user-lsp r ':lsp-references<ret>'            -docstring 'list references'
map global user-lsp R ':lsp-rename-prompt<ret>'         -docstring 'rename'
map global user-lsp o ':lsp-outgoing-calls<ret>'        -docstring 'outgoing calls'
map global user-lsp s ':lsp-goto-document-symbol<ret>'  -docstring 'pick document symbol'
map global user-lsp S ':lsp-document-symbol<ret>'       -docstring 'list workspace symbols'
map global user-lsp x ':lsp-find-error<ret>'            -docstring 'jump to the prev/next error'
map global user-lsp ( ':lsp-previous-function<ret>'     -docstring 'jump to the previous function'
map global user-lsp ) ':lsp-next-function<ret>'         -docstring 'jump to the next function'
