#+TITLE:phaazon’s configuration

* Theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-one)
#+end_src
* Better defaults
** Fill column
#+begin_src emacs-lisp
(setq-default fill-column 120)
(map! :leader :n "t a" 'auto-fill-mode)
#+end_src
** Local leader
#+BEGIN_SRC emacs-lisp
(setq doom-localleader-key ",")
#+END_SRC
** Font weights
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "JetBrains Mono" :size 18))
#+END_SRC
** Redo on U
#+BEGIN_SRC emacs-lisp
(map! :n "U" 'undo-fu-only-redo)
#+END_SRC
** Special configuration for macOS
#+BEGIN_SRC emacs-lisp
(when (string-equal system-type "darwin")
  (progn
    (setq mac-option-key-is-meta nil)
    (setq mac-command-key-is-meta t)
    (setq mac-command-modifier 'meta)
    (setq mac-option-modifier nil)))
#+END_SRC
** Indent / tabstop
#+BEGIN_SRC emacs-lisp
(setq evil-shift-width 2)
#+END_SRC
** Automatic whitespace trailing
#+begin_src emacs-lisp
(add-hook! 'before-save-hook 'delete-trailing-whitespace)
#+end_src
** Window handling
#+BEGIN_SRC emacs-lisp
(map! :n "w o" #'evil-window-split)
#+END_SRC
** Disable auto-save
#+begin_src emacs-lisp
(setq auto-save-default nil)
#+end_src
** Make underscores part of words in some major modes
#+begin_src elisp
(add-hook! 'rustic-mode-hook (modify-syntax-entry ?_ "w"))
#+end_src
** Enable Auto-Fill mode for some major modes
#+begin_src emacs-lisp
(add-hook! 'rustic-mode-hook (auto-fill-mode 1))
#+end_src
* Statusline
The default statusline of Doom is pretty but… not very practical for the programmer I am. For instance, knowing the number
of characters inside a buffer is everything but useful. So I’m cleaning a bit all this mess.

#+begin_src elisp
(after! doom-modeline
  (setq doom-modeline-vcs-max-length 30
        doom-modeline-indent-info t
        doom-modeline-buffer-encoding nil
        doom-modeline-column-zero-based nil
        doom-modeline-major-icon-mode t))
#+end_src
* Avy
#+BEGIN_SRC emacs-lisp
(map! :nvom "è" 'evil-avy-goto-word-0)

(after! avy
  (setq avy-keys '(?e ?t ?o ?v ?x ?q ?p ?d ?y ?g ?f ?b ?l ?z ?h ?c ?k ?i ?s ?u ?r ?a ?n)
        avy-background t))

(setq avy-orders-alist
      '((avy-goto-char . avy-order-closest)
        (avy-goto-word-0 . avy-order-closest)))
#+END_SRC

* Flycheck
#+BEGIN_SRC emacs-lisp
(setq flycheck-check-syntax-automatically '(save idle-change))
#+END_SRC

* Company
Basic configuration:
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'global-company-mode)

(after! sh-script
  (set-company-backend! 'shmode
    '(company-shell :with company-yasnippet)))
#+END_SRC

#+RESULTS:

Keybindings and overrides:
#+BEGIN_SRC emacs-lisp
;; ;; OVERRIDES
;; (map! :mode emacs :map company-active-map
;;       "<RET>" nil
;;       "<return>" nil)

;; (map! :mode emacs :map general-company-active-map-backup-map
;;       "<RET>" nil
;;       "<return>" nil)

;; ;; KEYBINDINGS
;; (map! :map company-mode-map
;;       :i "C-y" 'company-complete-selection)
#+END_SRC

Cute colors:
#+BEGIN_SRC emacs-lisp
(use-package company-box
  :hook (company-mode . company-box-mode))
#+END_SRC
* Org-mode
** Paths
Here is the list of all paths we need to set to have a customized experience.
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org")
(setq org-agenda-files '("~/org"))
#+END_SRC
** Org modules
Modules can be loaded to enable more features of org-modes.
#+BEGIN_SRC emacs-lisp
;; (setq org-modules '(ol-bibtex habits))
#+END_SRC

Description:

| Module name | What it does                   |
|-------------+--------------------------------|
| =habits=    | Enable the habit =TODO= style. |
** Keybindings
| Keybinding      | Description                                                                                                |   |
|-----------------+------------------------------------------------------------------------------------------------------------+---|
| =TAB=           | Cycle through different section, like headlines, folds, etc. It is also possible to use /evil/ keybindings |   |
| =SPC n n=       | Open the capture buffer                                                                                    |   |
| =SPC m g g=     | Go to outline.                                                                                             |   |
| =SPC m r r=     | Refile to other targets.                                                                                   |   |
| =SPC m s n=     | Narrow buffer to subtree.                                                                                  |   |
| =SPC m s N=     | Widen buffer to parent tree.                                                                               |   |
| =SPC m l s=     | Store a link to the current location.                                                                      |   |
| =SPC m l i=     | Insert a link.                                                                                             |   |
| =SPC m t=       | Prompt for todo.                                                                                           |   |
| =SPC m T=       | TODO list.                                                                                                 |   |
| =SPC u SPC m t= | Insert a todo by asking first for a note; automatically insert date.                                       |   |
| =SPC m x=       | Toggle checkbox.                                                                                           |   |
| =SPC m d d=     | Insert a deadline.                                                                                         |   |
| =SPC m d s=     | Insert a schedule.                                                                                         |   |
| =SPC m r r=     | General refile menu.                                                                                       |   |
| =SPC m A=       | Archive a subtree.                                                                                         |   |
| =SPC X=         | Display the Org capture template menu.                                                                     |   |
| =C-c C-p=       | Go to previous heading.                                                                                    |   |
| =C-c C-n=       | Go to next heading.                                                                                        |   |
| =C-c C-b=       | Go to previous (same level) heading.                                                                       |   |
| =C-c C-f=       | Go to next (same level) heading.                                                                           |   |
| =C-c C-q=       | Set tag for current headline.                                                                              |   |
| =C-c C-c=       | Same as =C-c C-q= when pointing on a headline.                                                             |   |
| =C-c *=         | Transform into heading.                                                                                    |   |
| =C-c C-x d=     | Insert a drawer.                                                                                           |   |
| =C-c .=         | Prompt for a date and insert it.                                                                           |   |
| =C-RET=         | Insert new heading below.                                                                                  |   |
| =C-S-RET=       | Insert new heading above.                                                                                  |   |
| =S s=           | Raise priority.                                                                                            |   |
| =S t=           | Lower priority.                                                                                            |   |

Additional keybindings here:

#+BEGIN_SRC emacs-lisp
(map! :map org-mode-map
      :n "C" 'org-shiftleft
      :n "R" 'org-shiftright
      :n "T" 'org-shiftdown
      :n "S" 'org-shiftup
      :n "M-c" 'org-metaleft
      :n "M-r" 'org-metaright
      :n "M-s" 'org-metaup
      :n "M-t" 'org-metadown
      :n "M-S-c" 'org-do-promote
      :n "M-S-r" 'org-do-demote)
#+END_SRC
** Default visibility
When /emacs/ visits an ~.org~ file for the first time, the global state is set to =OVERVIEW=. It is possible to change that
behavior with the =+STARTUP:= modifier. Accepted values are:

- =STARTUP: overview=
- =STARTUP: content=
- =STARTUP: showall=
- =STARTUP: showeverything=
** Plain lists
Plain lists come into three parts:

1. Unordered lists start with =-=, =+= or =*=.
2. Ordered lists start with =1.=.
3. Description list items use the =::= delimiter.

As an example for /description lists/:

- Foo :: description goes here.
- Bar :: other description goes here.
** Drawers
Emacs has /drawers/ that allow to hide content. They are introduced with the =:DRAWERNAME:= with =:END:= syntax.
:DRAWERNAME:
This can be folded if wanted
:END:
** Hyperlinks
*** General
The general syntax is ~[[LINK][DESCRIPTION]]~, or simply ~[[LINK]]~. A link like ~[[*Something like that]]~ points to a section in the current document.
/Dedicated targets/ links look like ~<<this>>~.

It is possible to store a link to the current location with =org-store-link=
*** Link abbreviations
The syntax is ~[[linkword:tag][description]]~. They allow to inject text based on the value of ~tag~ if the abbrev list contains either ~%s~ or
~%h~.

This list defines the available linkwords:
#+BEGIN_SRC emacs-lisp
(setq org-link-abbrev-alist
      '(("google"    . "http://www.google.com/search?q=%s")
        ("gmap" . "https://maps.google.com/maps?q=%s")
        ("gimages" . "https://google.com/images?q=%s")
        ("doom-repo" . "https://github.com/hlissner/doom-emacs/%s")
        ("wolfram" . "https://wolframalpha.com/input/?i=%s")
        ("wikipedia" . "https://en.wikipedia.org/wiki/%s")
        ("duckduckgo" . "https://duckduckgo.com/?q=%s")
        ("youtube" . "https://youtube.com/watch?v=%s")
        ("github" . "https://github.com/%s")
        ("wr" . "https://www.wordreference.com/enfr/%s")))
#+END_SRC

Special abbreviations can be set on a per-file basis with ~#+LINK: google http://www.google.com/search?q=%s~, for instance.
** Todo lists
The =TODO= annotation sets a /todo/ in any headline.

*** Workflow states
States:
#+BEGIN_SRC emacs-lisp
;; (setq org-todo-keywords
;;       '((sequence "TODO(t)" "WIP(w!/!)" "FROZEN(z!/!)" "LATER(l!/!)" "|" "DONE(d!/!)")
;;         (sequence "BUG(b)" "|" "FIXED(f!/!)")
;;         (sequence "FEATURE(r)" "|" "IMPLEMENTED(i!/!)")
;;         (sequence "|" "CANCELLED(c@)")))
#+END_SRC

Faces:
#+BEGIN_SRC emacs-lisp
;; (setq org-todo-keyword-faces
;;       '(("TODO" . "blue") ("WIP" . (:foreground "green" :weight bold)) ("FROZEN" . "blue") ("DONE" . "grey")
;;         ("BUG" . (:foreground "red" :weight bold)) ("FIXED" (:foreground "blue" :weight bold))
;;         ("FEATURE" . "purple") ("IMPLEMENTED" . (:foreground "blue" :weight bold))
;;         ("CANCELLED" . "grey")))
#+END_SRC
*** Progress logging
Timestamp can be automatically added when changing a TODO state, or by doing it manually with =org-todo= with the =C-u= prefix argument —
also =SPC u= for us.

Automatically track closing time:
#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
#+END_SRC

Put the TODO notes into a drawer — =LOGBOOK=:
#+BEGIN_SRC emacs-lisp
(setq org-log-into-drawer t)
#+END_SRC

It is possible to set whether we want to add a timestamp or a timestamped note for each keyword with, respectively, ~!~ (for timestamp) or
~@~ (for a timestamped note). Use ~/~ to state what to do when switching back from a mode.
*** Habits
Habits are special =TODO= items used to track reccurent activities. It must:

1. Be a =TODO= item.
2. Has the =STYLE= property set to =habit=.
3. Has a scheduled date, usually with a ~.+~ style repeate interval. ~++~ stands for habits with time constraints and ~+~ for unusual habit with
   a backlog.
4. Time range can be put with ~/~ after ~.+~ — e.g. ~.+2d/4d~ for something that can be done after two days but shouldn’t take more than four.
5. The =DONE= state triggers state logging.
*** Priorities
Priorities help with sorting items with priorities.

#+BEGIN_SRC emacs-lisp
(setq org-fancy-priorities-list '("❗" "⬆" "⬇"))
#+END_SRC
*** Subtasks
To enable subtasks, insert ~[/]~ or ~[%]~ anywhere in the headline.

Automatically change to =DONE= an entry when its children have been completed:

#+BEGIN_SRC emacs-lisp
(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states)   ; turn off logging
    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

(add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
#+END_SRC
**** Example with / [1/3]
***** TODO Foo
***** DONE Bair
***** TODO Zoo
**** TODO Example2 with % [33%]
***** TODO Foo
***** DONE Bar
***** TODO Zoo
*** Checkboxes
Checkboxes start with a ~[ ]~.

Example:
**** TODO Organize party [0/2]
- [-] call people [1/3]
  - [ ] Peter
  - [X] Sarah
  - [ ] Sam
- [-] order food
  - [ ] think about what music to play
  - [X] talk to the neighbors
** Tags
Tags have the form ~:tag:~ or ~:tag1:tag2:tag3:etc.~ and are located at the end of headlines.

Default tags:
#+BEGIN_SRC emacs-lisp
(setq org-tag-alist '(("spare" . ?s) ("work" . ?w) ("learn" . ?l)))
#+END_SRC
** Properties
Properties are like tags, but key-value pairs. They use the special =:PROPERTIES: … :END:= drawer and have the syntax ~:name: value~.
The special syntax ~:+PROPERTY: var+ value~ allows to append a value to an already declared variable.

Special properties:
| Property name  | Description                                                                                                                             |
|----------------+-----------------------------------------------------------------------------------------------------------------------------------------|
| =ALLTAGS=      | All tags, including inherited ones.                                                                                                     |
| =BLOCKED=      | t if task is currently blocked by children or siblings.                                                                                 |
| =CATEGORY=     | The category of an entry.                                                                                                               |
| =CLOCKSUM=     | The sum of CLOCK intervals in the subtree. org-clock-sum must be run first to compute the values in the current buffer.                 |
| =CLOCKSUM_T=   | The sum of CLOCK intervals in the subtree for today. org-clock-sum-today must be run first to compute the values in the current buffer. |
| =CLOSED=       | When was this entry closed?                                                                                                             |
| =DEADLINE=     | The deadline timestamp.                                                                                                                 |
| =FILE=         | The filename the entry is located in.                                                                                                   |
| =ITEM=         | The headline of the entry.                                                                                                              |
| =PRIORITY=     | The priority of the entry, a string with a single letter.                                                                               |
| =SCHEDULED=    | The scheduling timestamp.                                                                                                               |
| =TAGS=         | The tags defined directly in the headline.                                                                                              |
| =TIMESTAMP=    | The first keyword-less timestamp in the entry.                                                                                          |
| =TIMESTAMP_IA= | The first inactive timestamp in the entry.                                                                                              |
| =TODO=         | The TODO keyword of the entry.                                                                                                          |
** TODO Columns
Columns allow to have a tabular view of headlines.

**** Example
:PROPERTIES:
:COLUMNS:  %25ITEM %TAGS %PRIORITY %TODO
:END:
***** One :foo:
***** Two :bar:
***** Three :zoo:
** Timestamps
General form is ~<2006-11-01 Wed 19:15>~. They can have a repeater interval, as in ~<2007-05-16 Wed 12:30 +1w>~.
Two timestamps connected by ~--~ denote a range.  Inactive timestamps are surrounded with ~[]~.

Planning can be done with two special keywords: =DEADLINE:= and =SCHEDULED:=, right before the date.
** Moving information around
Refiling allow to move heading where the cursor is in into another heading somewhere else, with completion.
Copying is the same, but preserves the original source.

Archiving allows to move something out of the way, to prevent it from showing up again in agendas and listing. It requires setting up the
=org-archive-location= variable first. The default is enough for us though right now.
* vc-gutter
Just a small tweak to have better gutter symbols.
#+begin_src emacs-lisp
(after! git-gutter-fringe
  (if (fboundp 'fringe-mode) (fringe-mode '4))
  (define-fringe-bitmap 'git-gutter-fr:deleted [255 255 255]
    nil nil 'bottom))
#+end_src

* Languages
** Haskell
#+BEGIN_SRC emacs-lisp
(setq haskell-process-type 'cabal-new-repl)
#+END_SRC

** Rust
#+BEGIN_SRC emacs-lisp
(setq rustic-indent-offset 2)
#+END_SRC
** Tree-sitter, yaaay:
#+begin_src emacs-lisp
(use-package! tree-sitter
  :config
  (require 'tree-sitter-langs)
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
#+end_src
* Projectile
#+begin_src emacs-lisp
(setq projectile-project-search-path "~/dev")
#+end_src
* EPA
#+begin_src emacs-lisp
(setq epa-file-encrypt-to '(9BFDD250BBECA905))
#+end_src
